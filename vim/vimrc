" This file goes in $HOME/.vimrc

let mapleader = "\<Space>"

" Clear search highlights on leader+return
nnoremap <leader><cr> :nohlsearch<cr>

" Better home/end keys - synonymous to normal movement
nnoremap H ^
nnoremap L $
vnoremap L $

:nmap <C-h> :tabprevious<CR>
:nmap <C-l> :tabnext<CR>
:nmap <C-t> :tabnew<CR>
:map <C-h> :tabprevious<CR>
:map <C-l> :tabnext<CR>
:map <C-t> :tabnew<CR>
:imap <C-h> <Esc>:tabprevious<CR>i
:imap <C-l> <Esc>:tabnext<CR>i
:imap <C-l> <Esc>:tabnew<CR>i

" Better looking splits
set fillchars+=vert:\
highlight VertSplit ctermfg=0 ctermbg=0

set encoding=utf-8 " Define default encoding for the files

set autoindent " always set autoindenting on
set smartindent " better indentaion with C-like (i.e. { }) languages

set ttyfast " imporove redrawing smoothness

set backspace=indent,eol,start " allow backspacing over indent, eol, sol

set laststatus=2 " Always show the statusline"

set history=1000 " keep 1000 lines of command line history

set showbreak=↪

set matchtime=3 " highlight parentheses for 30 1/10s of a secon

set splitright " vertically split windows onto the right side

set title " set window name to 'titlestring' or default
set titlestring="~ vim ~" " ... this is the title string

set linebreak " wrap lines only at 'breakat' characters

set noerrorbells " remove any annoying sounds / flashes (1)
set novisualbell
set t_vb=

set list " show special characters, see below
set listchars=tab:▸\ ,extends:❯,precedes:❮,trail:·

if has("breakindent")
	set breakindent " continue indentation on wrapped lines (v7.4.338+)
endif

set noexpandtab " tabs for indentation, spaces for alingment
set copyindent
set preserveindent
set smarttab " insert 'shiftwidth' spaces and remove 'shiftwidth' spaces
set shiftround " Indent to nearest tabstop
set softtabstop=0
set shiftwidth=4
set tabstop=4 " distinguishable from spaces in files that use tabs
set noexpandtab sts=0 sw=4 ts=4
set cindent
"set cinoptions=(0,u0,U0)
set cinoptions=(1

set wrap " lines longer than screen will wrap onto the next line
set textwidth=80 " break lines longer than 80 characters

set wildmenu " Show command-line autocompletions

set ruler " show the cursor position all the time
set cursorline " Show cursor line

set showcmd " display incomplete commands

set number
set numberwidth=4       " Width of line number field

set autochdir " Autoupdate current dir

set ignorecase " Ignore the case of letters in searches
set smartcase " Become case-sensitive if capital letters are used in search
set hlsearch " Highlight all search matches
set incsearch " Place cursor at current search match
set gdefault " Substitute all matches in a line by default
set showmatch " Set show matching parenthesis

set clipboard+=unnamed " Use system clipboard

set go+=a       " Visual selection automatically copied to clipboard

set textwidth=0       " Unset text width variable

set wrapmargin=0       " Unset wrap margin variable

set virtualedit=onemore " Allow for cursor beyond last character

set nobackup " Disable backups
set writebackup " Make backup before overwriting, until save
set noswapfile " I hate swap files; they must burn

setlocal cm=blowfish

if has('mouse')
	set mouse=a
endif

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
	command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
				\ | wincmd p | diffthis
endif


" Autodownload vim-plug if it's not installed. Neat!
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !mkdir -p ~/.vim/autoload
	silent !curl -fLo ~/.vim/autoload/plug.vim
				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall
endif

call plug#begin('~/.vim/plugged')

" Color Schemes

Plug 'altercation/vim-colors-solarized' " Solarized color scheme
Plug 'shaond/vim-guru'
Plug 'tpope/vim-vividchalk'
Plug 'lifepillar/vim-wwdc16-theme'
Plug 'notpratheek/vim-luna'

" Language Specific Plugins

Plug 'vim-scripts/Arduino-syntax-file' " Arduino
Plug 'ap/vim-css-color' " CSS. Highlights the CSS color in the editor
Plug 'vim-scripts/django.vim' " Django
Plug 'elixir-lang/vim-elixir'
Plug 'lunaru/vim-less' " LESS. CSS compiler
Plug 'JalaiAmitahl/maven-compiler.vim' " Maven
Plug 'nfnty/vim-nftables' " nftables
Plug 'vim-scripts/nginx.vim' " Nginx confuguration files
Plug 'StanAngeloff/php.vim' " PHP mode for vim
Plug 'vim-scripts/pydoc.vim' " Python docs
Plug 'klen/python-mode' " Python mode for vim
let g:pymode_rope = 0
let g:pymode_python = 'python3'
" Documentation
let g:pymode_doc = 1
let g:pymode_doc_key = 'K'
"Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "pyflakes,pep8"
" Auto check on save
let g:pymode_lint_write = 1
" Support virtualenv
let g:pymode_virtualenv = 1
" syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" Don't autofold code
let g:pymode_folding = 0

Plug 'leafgarland/typescript-vim' " Typescript
Plug 'sukima/xmledit' " XML Syntax
Plug 'othree/xml.vim'
Plug 'avakhov/vim-yaml' " Yaml


" General Vim Plugins

Plug 'jiangmiao/auto-pairs'
Plug 'kien/ctrlp.vim' " Fuzzy file search
map <Leader><Tab> :CtrlPMRUFiles<CR>

" Plug 'Raimondi/delimitMate' " Automatically insert matching delimiter.
" Replaced with Auto-Pairs for now, let's see
Plug 'junegunn/vim-easy-align' " Easily align text
" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

Plug 'nathanaelkane/vim-indent-guides' " Indent Guides is a plugin for visually displaying indent levels in Vim.
let g:indent_guides_auto_colors = 0
let g:indent_guides_start_level = 1
" let g:indent_guides_guide_size  = 1
let g:indent_guides_enable_on_vim_startup=1
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=234
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
Plug 'itchyny/lightline.vim' " Bottom Status Line
Plug 'Valloric/MatchTagAlways' " Always highlight enclosing tags
let g:mta_filetypes = {
			\ 'html' : 1,
			\ 'xhtml' : 1,
			\ 'xml' : 1,
			\ 'jinja' : 1,
			\ 'php' : 1,
			\}

Plug 'kristijanhusak/vim-multiple-cursors'
Plug 'scrooloose/nerdtree' " Neat file explorer
Plug 'unblevable/quick-scope'
Plug 'aaronbieber/vim-quicktask'
let g:quicktask_task_added_include_time = 1
Plug 'vim-scripts/Smart-Tabs' " Tabs to indent, spaces to align
Plug 'tpope/vim-surround' " quoting/parenthesizing made simple
Plug 'scrooloose/syntastic' " Multi-language Syntax checker
let g:syntastic_aggregate_errors = 1

Plug 'dhruvasagar/vim-table-mode' " Create nice tables in vim
Plug 'godlygeek/tabular'
"Plug 'Valloric/YouCompleteMe' " General purpose completion
"let g:ycm_allow_changing_updatetime = 0

call plug#end()

" I don't use modula2, but I do use markdown.
au BufNewFile,BufRead,BufWrite *.md set filetype=markdown

" Arduino file types
au BufRead,BufNewFile *.pde set filetype=arduino
au BufRead,BufNewFile *.ino set filetype=arduino

" Detect nginx config files
au BufRead,BufNewFile /etc/nginx/*,/usr/local/nginx/conf/* if &ft == '' | setfiletype nginx | endif

syntax on
set term=xterm-256color
set t_Co=256
set t_ut=
set background=dark
let g:solarized_termtrans=1
let g:solarized_visibility="high"
let g:solarized_contrast="high"
let g:solarized_termcolors=256
colorscheme vividchalk
" Override the background colour from full black
hi Normal guibg=#262626

" Some colorschemes need this to show the proper colors (Luna, wwdc16...)
" Disable this to use solarized
set termguicolors

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %

filetype plugin indent on

" Remove trailing whitespace on save
function! TrimWhiteSpace()
	%s/\s\+$//e
endfunction

autocmd FileWritePre * :call TrimWhiteSpace()
autocmd FileAppendPre * :call TrimWhiteSpace()
autocmd FilterWritePre * :call TrimWhiteSpace()
autocmd BufWritePre * :call TrimWhiteSpace()

highlight SpecialKey ctermbg=8 ctermfg=0
