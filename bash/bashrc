#This file goes in $HOME/.bashrc

# Check for an interactive session
[ -z "$PS1" ] && return

CONFDIR="$HOME/config"

####################
# Helper functions #
####################

function print_color_cube {
	#
	# Prints the color "cube"
	#

	for code in $(seq -f "%03g" 0 7); do
		echo -en "\e[48;5;${code}m$code ";
	done
	echo ""
	for code in $(seq -f "%03g" 8 15); do
		echo -en "\e[48;5;${code}m$code ";
	done
	echo -e "\n"
	for code in $(seq -f "%03g" 16 231); do
		echo -en "\e[48;5;${code}m$code ";
		if ! (((10#$code - 15) % 6)); then
			echo -en "\e[0m ";
		fi;
		if ! (((10#$code - 15) % 36)); then
			echo -e "\e[0m";
		fi;
	done;
	echo ""
	for code in $(seq -f "%03g" 232 255); do
		echo -en "\e[48;5;${code}m$code ";
	done
	echo -e "\e[0m";
}

function print_cat {

#        echo ' /\_/\'
#        echo '( o.o )'
#        echo ' > ^ <'

	echo -e "
             $bryellow*$reset     ,MMM"$gray"8&&&.$reset            $bryellow*$reset
                  MMMM"$gray"88&&&&&$reset    $bryellow.$reset
                 MMMM"$gray"88&&&&&&&$reset
     $bryellow*$reset           MMM"$gray"88&&&&&&&&$reset
                 MMM"$gray"88&&&&&&&&$reset
                 'MMM"$gray"88&&&&&&'$reset
                   'MMM"$gray"8&&&'$reset      $bryellow*$reset
$brgray          |\___/|
$brgray          )     (             $bryellow.$reset              $bryellow'$reset
$brgray         =\     /=
$brgray           )===(       $bryellow*$reset
$brgray          /     \\
$brgray          |     |
$brgray         /       \\
$brgray         \       /
$gray  _/\_/\_/$brgray\__  _/"$gray"_/\_/\_/\_/\_/\_/\_/\_/\_/\_
$gray  |  |  |  |$brgray( ($gray  |  |  |  |  |  |  |  |  |  |
$gray  |  |  |  | $brgray) )$gray |  |  |  |  |  |  |  |  |  |
$gray  |  |  |  |$brgray(_($gray  |  |  |  |  |  |  |  |  |  |
$gray  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |
$gray  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |"

}

function get_hostname {
	if hash hostname 2>/dev/null; then
		hostname -s
	else
		hostnamectl hostname
	fi
}

function get_hostname_color {

	#
	# Gets a color for the hostname part of the PS1 based on it's hash
	#

	local HASH_ALGO='sha1sum'

	# Use 'shasum' if 'sha1sum' is not available. This happens in OSX
	command -v "${HASH_ALGO}" &>/dev/null || HASH_ALGO='shasum'

	declare -a local HOST_COLORS

	HOST_COLORS[0]="$(tput bold)$(tput setaf 39)"
	HOST_COLORS[1]="$(tput bold)$(tput setaf 197)"
	HOST_COLORS[2]="$(tput bold)$(tput setaf 220)"
	HOST_COLORS[2]="$(tput bold)$(tput setaf 231)"
	HOST_COLORS[3]="$(tput bold)$(tput setaf 114)"
	HOST_COLORS[4]="$(tput bold)$(tput setaf 164)"
	HOST_COLORS[5]="$(tput bold)$(tput setaf 220)"
	HOST_COLORS[6]="$(tput bold)$(tput setaf 208)"

	local HOST_HASH="0x$(sha1sum <<<$(get_hostname) | cut -d ' ' -f 1)"

	# Make sure the index is always positive
	local COLOR_INDEX=$(( $HOST_HASH % ${#HOST_COLORS[@]} ))
	local COLOR_INDEX="${COLOR_INDEX#-}"

	echo "${HOST_COLORS[COLOR_INDEX]}"
}

function load_overrides {
	local PART="${1}"

	local FILE_PATH="${CONFDIR}/bash/$(get_hostname)_${PART}.bashrc"

	if [ -e "${FILE_PATH}" ]; then
		source "${FILE_PATH}"
	fi
}

############
# Themming #
############

#TODO: Update these colors to use the gurunew colors I'm using in vim

# Solarized colors
# (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null
then
	reset=$(tput sgr0)
	bold=$(tput bold)

	black=$(tput setaf 0)
	brblack=$(tput setaf 234)

	gray=$(tput setaf 240)
	brgray=$(tput setaf 248)

	white=$(tput setaf 254)
	brwhite=$(tput setaf 15)

	red=$(tput setaf 160)
	brred=$(tput setaf 196)

	orange=$(tput setaf 202)
	lightorange=$(tput setaf 208)

	yellow=$(tput setaf 172)
	bryellow=$(tput setaf 220)

	green=$(tput setaf 40)
	brgreen=$(tput setaf 82)

	cyan=$(tput setaf 37)
	brcyan=$(tput setaf 73)

	blue=$(tput setaf 33)
	brblue=$(tput setaf 69)

	purple=$(tput setaf 125)

	magenta=$(tput setaf 125)
	brmagenta=$(tput setaf 161)

else
	reset="\e[0m"
	bold="\e[1m"

	black="\e[38;5;0m"
	brblack="\e[38;5;234m"

	gray="\e[38;5;240m"
	brgray="\e[38;5;248m"

	white="\e[38;5;254m"
	brwhite="\e[38;5;15m"

	brred="\e[38;5;196m"
	red="\e[38;5;160m"

	orange="\e[38;5;202m"
	orange="\e[38;5;208m"

	yellow="\e[38;5;172m"
	bryellow="\e[38;5;220m"

	green="\e[38;5;64m"
	brgreen="\e[38;5;76m"

	cyan="\e[38;5;37m"
	brcyan="\e[38;5;73m"

	blue="\e[38;5;33m"
	brblue="\e[38;5;69m"

	purple="\e[38;5;125m"

	magenta="\e[38;5;125m"
	brmagenta="\e[38;5;161m"
fi

load_overrides "colors" # Load host-based overrides for the themming

# Solarized color scheme for dircolors
if [ -e "${CONFDIR}/dircolors/dircolors.256dark" ]; then
    eval $(dircolors "${CONFDIR}/dircolors/dircolors.256dark")
fi

# Solarized color scheme for Midnight Commander
if [ -e "${CONFDIR}/mc/solarized.ini" ]; then
    export MC_SKIN="${CONFDIR}/mc/solarized.ini"
fi

# Colors to use in the PS1
PS1_BACKGROUND="$(tput setab 233)"
PS1_TIMECOLOR="$bold$lightorange"
PS1_USERCOLOR="$bold$green"
PS1_ATCOLOR="$bold$blue"
PS1_HOSTCOLOR="$bold$brgreen"
PS1_PATHCOLOR="$bold$blue"
PS1_DOLLARCOLOR="$bold$green"
PS1_GITCOLOR="$bold$(tput setaf 92)"

# Coloured ManPages
# TODO: Use the colors from the colorscheme
export LESS_TERMCAP_mb="$bold$brblue"
export LESS_TERMCAP_md="$bold$orange"
export LESS_TERMCAP_me="$reset"
export LESS_TERMCAP_so=$(tput bold; tput setaf 7; tput setab 0)
export LESS_TERMCAP_se=$(tput rmso; tput sgr0)
export LESS_TERMCAP_us=$(tput smul; tput bold; tput setaf 3)
export LESS_TERMCAP_ue=$(tput rmul; tput sgr0)
export LESS_TERMCAP_mr=$(tput rev)
export LESS_TERMCAP_mh=$(tput dim)
export LESS_TERMCAP_ZN=$(tput ssubm)
export LESS_TERMCAP_ZV=$(tput rsubm)
export LESS_TERMCAP_ZO=$(tput ssupm)
export LESS_TERMCAP_ZW=$(tput rsupm)

##################
# Shell defaults #
##################

export EDITOR=vim
export VISUAL=vim

# Bash History improvements, thanks to /u/JonathanMcClare !
# Don't put duplicate lines in the history. See bash(1) for more options.
# ignoredups - causes lines matching the previous history entry to not be
#     saved
# ignorespace - lines which begin with a space character are not saved in the
#     history list
# ignoreboth - shorthand for ignorespace and ignoredups
# erasedups - causes all previous lines matching the current line to be
#     removed from the history list before that line is saved
export HISTCONTROL=ignoreboth:erasedups

# append to the history file, don't overwrite it
shopt -s histappend

export HISTSIZE=100000
export HISTFILESIZE=100000000000

alias ls='ls --color=auto'
alias ll='ls -lish'
alias sudo='sudo -E' # Presserve the environment when running sudo
alias trizen='ionice -n 5 nice -n 5 trizen'

load_overrides "defaults" # Load host-based overrides for the defaults and aliases

###########################
# GPG Agent configuration #
###########################

# Start the gpg-agent if not already running
if ! pgrep -x -u "${USER}" gpg-agent >/dev/null 2>&1; then
	gpg-connect-agent /bye >/dev/null 2>&1
fi

# Set SSH to use gpg-agent
unset SSH_AGENT_PID
if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
	export SSH_AUTH_SOCK="${HOME}/.gnupg/S.gpg-agent.ssh"
fi

# Set GPG TTY
GPG_TTY=$(tty)
export GPG_TTY

# Refresh gpg-agent tty in case user switches into an X session
gpg-connect-agent updatestartuptty /bye >/dev/null

source /usr/share/git/completion/git-prompt.sh

if [ "$(type -t __git_ps1)" != 'function' ]
then
	function __git_ps1 {
		true
	}
fi

#######
# PS1 #
#######

export GIT_PS1_SHOWDIRTYSTATE=true

PS1="\[${PS1_BACKGROUND}\]\[${PS1_TIMECOLOR}\](\D{%F %T}) \[${PS1_USERCOLOR}\]\u\[${PS1_ATCOLOR}\]@\[$(get_hostname_color)\]\h \[${PS1_PATHCOLOR}\][\w]\033[K\[$reset\]\n\[${PS1_GITCOLOR}\]\$(__git_ps1) \[${PS1_DOLLARCOLOR}\]\$\[$reset\] "

load_overrides "ps1" # Load host-based overrides for the PS1

# Start or restore a tmux session if connecting through ssh without setting the NOTMUX environment variable
if [ -z "$TMUX" ] && [ -z "$NOTMUX" ] && [ -n "$SSH_CLIENT" ] && [ -n "$SSH_TTY" ] && [ -n "$SSH_CONNECTION" ]; then
    TERM=xterm-256color tmux -2 new-session -A -s system && exit 0
    echo "tmux failed! continuing with normal bash startup"
fi
